package jrJava.tree_2;

import java.util.Stack;

public class Tree {

	private Node root;
	
	public Tree(){ root = null; }
	
	
	public Node find(int id){
		if(root==null) return null;
		
		Node current = root;
		
		while(current.id!=id){
			if(id>current.id) current = current.rightChild;
			else current = current.leftChild;
			
			if(current==null) return null;
		}
		
		return current;
	}
	
	
	public void insert(int id, double value){
		Node node = new Node(id, value);
		
		if(root==null){
			root = node;
			return;
		}
		
		Node parent;
		Node current = root;
		
		while(true){
			parent = current;
			
			if(id<current.id) {
				current = current.leftChild;
				if(current==null){
					parent.leftChild = node;
					return;
				}
			}
			else {
				current = current.rightChild;
				if(current==null){
					parent.rightChild = node;
					return;
				}
			}
			
		}
		
	}
	public boolean delete(int id){
		if(root == null)return false;//empty tree
		
		Node current = root;
		Node parent = root;
		boolean left;
		
		while(current.id != id){
			parent = current;
			if(id<current.id){
				current = current.leftChild;
				left = true;
			}
			else{
				current = current.rightChild;
				left = false;
			}
		}
		
		return true;
		
	}
	
	public void printTreeInOrder(){
		traverse(root);
	}
	
	
	private void traverse(Node node){
		if(node==null) return;
		
		traverse(node.leftChild);
		System.out.println(node);
		traverse(node.rightChild);
	}
	
	
	public void traverseTopToBottom(){
		
		Stack<Node> mainStack = new Stack<Node>();
		Stack<Node> childrenStack;
		
		mainStack.push(root);
		boolean isRowEmpty = false;
		
		int ns = 64;
		
		while(!isRowEmpty){
			childrenStack = new Stack<Node>();
			
			for(int i=0; i<ns; i++) System.out.print(' '); 
			
			isRowEmpty = true;
			while(!mainStack.isEmpty()){
				Node each = mainStack.pop();
				
				if(each!=null){
					System.out.print(each.id);
					childrenStack.push(each.leftChild);
					childrenStack.push(each.rightChild);
					if(each.leftChild!=null || each.rightChild!=null) isRowEmpty = false;
				}
				else {
					System.out.print("--");
					childrenStack.push(null);
					childrenStack.push(null);
				}
				
				for(int i=0; i<2*ns-2; i++) System.out.print(' ');
			}
			
			System.out.println("\n");
			ns /= 2;
			while(!childrenStack.isEmpty()) mainStack.push(childrenStack.pop());
			
		}
		
	}
	public Node minimum(){
		if(root == null)return null; //no minimum
		Node current = root;
		while(current.leftChild != null){
			current = current.leftChild;
		}
		return current;
	
	}
	public Node maximum(){
		if(root == null) return null;
		Node current = root;
		while(current.rightChild != null){
			current = current.rightChild;
		}
		return current;
	}
}










